<?xml version='1.0' encoding='utf-8'?>
<CFile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <variables>
    <variable name="current_count" type="INT"/>
  </variables>
  <sketch>
    <xhtml:p><![CDATA[


// This is the Arduino side of the project. The functions sketch_setup() and
// sketch_loop() provide the same functionality of the setup() and loop()
// functions of a regular Arduino sketch. On top of this code editor there is a
// variable table. You can add variables there that are shared between the 
// arduino code and the PLC code. Since they are shared, you can, for example,
// read a sensor on the arduino sketch and use the reading in a PLC program. 
// On the PLC side you must declare the same variable with the class "external"
// before being able to use it in your program.

// This Arduino sketch implementation is compatible with virtually every library
// or code you can possibly run on the regular Arduino IDE. You can create your
// own functions and also #include external libraries (as long as they are also
// installed on your Arduino IDE). The only catch is that your sketch_loop() 
// function cannot block (long while loop or delays), or else your PLC code will
// block as well.

// Notes about this particular demo: This code was taken from the u8glib
// progress bar demo on Wokwi: https://wokwi.com/projects/333991258811794002.
// The value of the gauge displayed in the LCD screen is taken from the 
// 'current_count' variable which is shared with the main PLC program.
// You can run this code on the Wokwi simulation by selecting "compile only"
// on the upload dialog. At the end of the compilation, a message will appear
// showing the location of the compiled file. You can then upload this file
// to the Wokwi simulation by pressing F1 and selecting "Upload Firmware and
// Start Simulation..."

#include <LiquidCrystal_I2C.h>  // if you don´t have I2C version of the display,
                                // use LiquidCrystal.h library instead

LiquidCrystal_I2C lcd(0x27,16,2);  // set the LCD address to 0x27
                                   // if you don´t know the I2C address of the 
                                   // display, use I2C scanner first 
                                   //(https://playground.arduino.cc/Main/
                                   // I2cScanner/)


// define custom characters/arrays - every character is 5x8 "pixels"

byte gauge_empty[8] =  {B11111, B00000, B00000, B00000, B00000, B00000, B00000, B11111};    // empty middle piece
byte gauge_fill_1[8] = {B11111, B10000, B10000, B10000, B10000, B10000, B10000, B11111};    // filled gauge - 1 column
byte gauge_fill_2[8] = {B11111, B11000, B11000, B11000, B11000, B11000, B11000, B11111};    // filled gauge - 2 columns
byte gauge_fill_3[8] = {B11111, B11100, B11100, B11100, B11100, B11100, B11100, B11111};    // filled gauge - 3 columns
byte gauge_fill_4[8] = {B11111, B11110, B11110, B11110, B11110, B11110, B11110, B11111};    // filled gauge - 4 columns
byte gauge_fill_5[8] = {B11111, B11111, B11111, B11111, B11111, B11111, B11111, B11111};    // filled gauge - 5 columns
byte gauge_left[8] =   {B11111, B10000, B10000, B10000, B10000, B10000, B10000, B11111};    // left part of gauge - empty
byte gauge_right[8] =  {B11111, B00001, B00001, B00001, B00001, B00001, B00001, B11111};    // right part of gauge - empty

byte gauge_mask_left[8] = {B01111, B11111, B11111, B11111, B11111, B11111, B11111, B01111};  // mask for rounded corners for leftmost character
byte gauge_mask_right[8] = {B11110, B11111, B11111, B11111, B11111, B11111, B11111, B11110}; // mask for rounded corners for rightmost character

byte warning_icon[8] = {B00100, B00100, B01110, B01010, B11011, B11111, B11011, B11111};     // warning icon - just because we still have one custom character left

byte gauge_left_dynamic[8];
byte gauge_right_dynamic[8];

char buffer[10];
int move_offset = 0;
const int gauge_size_chars = 16;
char gauge_string[gauge_size_chars+1];

void sketch_setup()
{
    lcd.init();                       // initialize the 16x2 lcd module
    lcd.createChar(7, gauge_empty);   // middle empty gauge
    lcd.createChar(1, gauge_fill_1);  // filled gauge - 1 column
    lcd.createChar(2, gauge_fill_2);  // filled gauge - 2 columns
    lcd.createChar(3, gauge_fill_3);  // filled gauge - 3 columns
    lcd.createChar(4, gauge_fill_4);  // filled gauge - 4 columns  
    lcd.createChar(0, warning_icon);  // warning icon - just because we can
    lcd.backlight();                  // enable backlight for the LCD module
}

void sketch_loop()
{
    float units_per_pixel = (gauge_size_chars*5.0)/100.0;
    int value_in_pixels = round(current_count * units_per_pixel);

    int tip_position = 0;

    if (value_in_pixels < 5) 
    {
        tip_position = 1;
    }
    else if (value_in_pixels > gauge_size_chars*5.0-5) 
    {
        tip_position = 3;
    }
    else 
    {
        tip_position = 2;
    }

    move_offset = 4 - ((value_in_pixels-1) % 5);

    for (int i=0; i<8; i++) 
    {
        if (tip_position == 1) 
        {
            gauge_left_dynamic[i] = (gauge_fill_5[i] << move_offset) | gauge_left[i];
        }
        else 
        {
            gauge_left_dynamic[i] = gauge_fill_5[i];
        }

        gauge_left_dynamic[i] = gauge_left_dynamic[i] & gauge_mask_left[i];
    }

    for (int i=0; i<8; i++) 
    {
        if (tip_position == 3) 
        {
            gauge_right_dynamic[i] = (gauge_fill_5[i] << move_offset) | gauge_right[i];
        }
        else 
        {
            gauge_right_dynamic[i] = gauge_right[i];
        }

        gauge_right_dynamic[i] = gauge_right_dynamic[i] & gauge_mask_right[i];
    }  

    lcd.createChar(5, gauge_left_dynamic);
    lcd.createChar(6, gauge_right_dynamic);

    for (int i=0; i<gauge_size_chars; i++) 
    {
        if (i==0) 
        {
            gauge_string[i] = byte(5);
        }
        else if (i==gauge_size_chars-1) 
        {
            gauge_string[i] = byte(6);
        }
        else 
        {
            if (value_in_pixels <= i*5) 
            {
                gauge_string[i] = byte(7);
            }

            else if (value_in_pixels > i*5 && value_in_pixels < (i+1)*5) 
            {
                gauge_string[i] = byte(5-move_offset);
            }
            else 
            {
                gauge_string[i] = byte(255);
            }
        }
    }    

    // gauge drawing
    lcd.setCursor(0,0);              // move cursor to top left
    sprintf(buffer, "CTU:%3d%% ", current_count);
    lcd.print(buffer);               // print the string on the display
    lcd.write(byte(0));              // print warning character  
  
    lcd.setCursor(0,1);              // move the cursor to the next line
    lcd.print(gauge_string);         // display the gauge
}
]]></xhtml:p>
  </sketch>
</CFile>
